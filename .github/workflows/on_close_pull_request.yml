name: Create release version


on:
  pull_request:
    branches: [ "master" ]
    types: [closed]

jobs:
  bump-version:
    name: Bump version
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      - uses: actions/checkout@v3
        name: Checkout
        with:
          fetch-depth: 0

      - name: Get previous tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: v0.0.0

      - name: Get PR labels
        id: pr-labels
        uses: joerick/pr-labels-action@v1.0.6

      - name: Calculate new version
        id: newversion
        run: |
          previous_tag=${{ steps.previoustag.outputs.tag }}
          formatted_version=${previous_tag:1}
          version_parts=(${formatted_version//./ })

          major_part=${version_parts[0]}
          minor_part=${version_parts[1]}
          patch_part=${version_parts[2]}

          if [ -n "${GITHUB_PR_LABEL_RELEASE_MAJOR}" ]; then
            major_part=$((major_part+1))
            minor_part=0
            patch_part=0
          elif [ -n "$GITHUB_PR_LABEL_RELEASE_MINOR" ]; then
            minor_part=$((minor_part+1))
            patch_part=0
          else
            patch_part=$((patch_part+1))
          fi

          new_version="v${major_part}.${minor_part}.${patch_part}"
          echo "New version: ${new_version}"
          echo ::set-output name=new_version::$new_version

      - name: Push tag
        run: |
          git tag ${{ steps.newversion.outputs.new_version }} -f
          git push origin ${{ steps.newversion.outputs.new_version }} -f
          

  release:
    name: Release apk
    runs-on: ubuntu-latest
    needs: [bump-version]
    if: github.event.pull_request.merged == true

    steps:
      - uses: actions/checkout@v3
        name: Checkout
        with:
          fetch-depth: 0

      - name: Get previous tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: v0.0.0

      - uses: actions/setup-java@v3
        name: Set up JDK
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Create local.properties file
        run: |
          touch local.properties
          
          echo "keystore.password=${{ secrets.KEY_STORE_PASSWORD }}" >> local.properties
          echo "key.alias=${{ secrets.ALIAS }}" >> local.properties
          echo "key.password=${{ secrets.KEY_PASSWORD }}" >> local.properties 

      - uses: actions/cache@v2
        name: Caching gradle
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Release
        run: |
          ./gradlew assembleRelease --stacktrace

      - name: Publish to dev server
        uses: JantHsueh/upload-file-action@master
        id: publish
        with:
          url: https://${{ secrets.CI_SERVER_DOMAIN_NAME }}/android/upload-apk?access_token=${{ secrets.CI_SERVER_ACCESS_TOKEN }}&version=${{ steps.previoustag.outputs.tag }}
          forms: '{}'
          fileForms: '{ "file": "app/build/outputs/apk/release/app-release.apk" }'

      - name: Send changelog via telegram
        uses: appleboy/telegram-action@master

        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            Вышла новая версия приложения: ${{ steps.previoustag.outputs.tag }}
            
            Изменения:
            ${{ github.event.pull_request.body }}
            
            Ссылка на apk файл: ${{ fromJson(steps.publish.outputs.output).data.url }}    

So basically:
REST: Client -> Server.
Webhook: Server -> Client.
Websocket: Client <-> Server.